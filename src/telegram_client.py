import os
import asyncio
import time
from telethon import TelegramClient, events
from telethon.tl import types
from telethon.errors import SessionPasswordNeededError, FloodWaitError
from typing import List, Dict, Any, Optional, Union
from datetime import datetime, timedelta
import pytz
from sqlalchemy.orm import Session

from src.config import API_ID, API_HASH, PHONE, BOT_TOKEN, TIMEZONE, DATA_DIR, AVAILABLE_MODELS
from src.database import (
    get_or_create_user, 
    subscribe_to_chat, 
    unsubscribe_from_chat, 
    update_user_settings, 
    save_summary, 
    update_last_processed_message,
    get_user_model
)
from src.models import User, ChatSubscription
from src.utils.logger import logger
from src.utils.openrouter import generate_summary, list_available_models


class TelegramSummaryClient:
    def __init__(self, db: Session):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç Telegram
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        self.db = db
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–∏
        session_file = os.path.join(DATA_DIR, 'anon')
        self.client = TelegramClient(session_file, API_ID, API_HASH)
        self.bot = None  # –ö–ª–∏–µ–Ω—Ç –±–æ—Ç–∞ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Telegram –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            session_path = os.path.join(DATA_DIR, 'anon.session')
            bot_session_path = os.path.join(DATA_DIR, 'bot.session')
            
            if not os.path.exists(session_path):
                logger.error(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_path}")
                logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç auth_telethon.py –Ω–∞ —Ö–æ—Å—Ç-–º–∞—à–∏–Ω–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ Docker")
                raise FileNotFoundError(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_path}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –∫–æ–¥
            await self.client.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await self.client.is_user_authorized():
                logger.error("–°–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, –∑–∞–ø—É—Å—Ç–∏–≤ —Å–∫—Ä–∏–ø—Ç auth_telethon.py")
                await self.client.disconnect()
                raise RuntimeError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                
            logger.info("Telethon –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω
            if BOT_TOKEN:
                if not os.path.exists(bot_session_path):
                    logger.error(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {bot_session_path}")
                    logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç auth_bot.py –Ω–∞ —Ö–æ—Å—Ç-–º–∞—à–∏–Ω–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ Docker")
                    raise FileNotFoundError(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {bot_session_path}")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
                bot_session_file = os.path.join(DATA_DIR, 'bot')
                self.bot = TelegramClient(bot_session_file, API_ID, API_HASH)
                
                # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
                await self.bot.connect()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞
                if not await self.bot.is_user_authorized():
                    logger.error("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –±–æ—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, –∑–∞–ø—É—Å—Ç–∏–≤ —Å–∫—Ä–∏–ø—Ç auth_bot.py")
                    await self.bot.disconnect()
                    raise RuntimeError("–ë–æ—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                
                logger.info("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π")
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
                self._register_bot_handlers()
            else:
                logger.warning("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω, –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω")
                
        except FloodWaitError as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ FloodWait
            wait_time = e.seconds
            logger.warning(f"Telegram —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å {wait_time} —Å–µ–∫—É–Ω–¥. –û–∂–∏–¥–∞–µ–º...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–∂–∏–¥–∞–Ω–∏–µ–º
            if hasattr(self, 'client') and self.client.is_connected():
                await self.client.disconnect()
            if hasattr(self, 'bot') and self.bot and self.bot.is_connected():
                await self.bot.disconnect()
                
            # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è + 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            await asyncio.sleep(wait_time + 5)
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
            logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            await self.start()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if hasattr(self, 'client') and self.client.is_connected():
                await self.client.disconnect()
            if hasattr(self, 'bot') and self.bot and self.bot.is_connected():
                await self.bot.disconnect()
            raise
            
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Telegram"""
        if self.client and self.client.is_connected():
            await self.client.disconnect()
            logger.info("Telethon –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        if self.bot and self.bot.is_connected():
            await self.bot.disconnect()
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
    def _register_bot_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        @self.bot.on(events.NewMessage(pattern='/start'))
        async def start_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
            sender = await event.get_sender()
            user = get_or_create_user(
                self.db, 
                sender.id, 
                sender.first_name,
                getattr(sender, 'last_name', None),
                getattr(sender, 'username', None)
            )
            
            await event.respond(
                f"–ü—Ä–∏–≤–µ—Ç, {sender.first_name}! üëã\n\n"
                "–Ø - –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ –ø–æ —á–∞—Ç–∞–º Telegram.\n\n"
                "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
                "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —á–∞—Ç–∞–º\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤—Ä–µ–º—è –∏ —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏\n\n"
                "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞.\n"
                "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /settings.\n\n"
                "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π /help."
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        @self.bot.on(events.NewMessage(pattern='/help'))
        async def help_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help"""
            help_text = (
                "üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
                "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
                "/settings - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –∏ —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏\n"
                "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Å–∞–º–º–∞—Ä–∏\n"
                "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —á–∞—Ç–∞ (–±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –≤—ã–±–æ—Ä)\n"
                "/summary - –ü–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n\n"
                "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏, –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞."
            )
            await event.respond(help_text, parse_mode='md')
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings
        @self.bot.on(events.NewMessage(pattern='/settings'))
        async def settings_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /settings"""
            sender = await event.get_sender()
            user = get_or_create_user(
                self.db, 
                sender.id, 
                sender.first_name,
                getattr(sender, 'last_name', None),
                getattr(sender, 'username', None)
            )
            
            settings = user.settings
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            model_name = settings.openrouter_model
            model_display_name = AVAILABLE_MODELS.get(model_name, model_name)
            
            await event.respond(
                "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
                f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏: {settings.delivery_time}\n"
                f"–ß–∞—Å—Ç–æ—Ç–∞: {settings.delivery_frequency}\n"
                f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {settings.timezone}\n\n"
                f"–ú–æ–¥–µ–ª—å –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {model_display_name}\n\n"
                "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`/time –ß–ß:–ú–ú`\n\n"
                "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É, –æ—Ç–ø—Ä–∞–≤—å:\n"
                "`/frequency daily` –∏–ª–∏ `/frequency weekly`\n\n"
                "–î–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π:\n"
                "`/models` - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π\n"
                "`/model ID_–º–æ–¥–µ–ª–∏` - –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏",
                parse_mode='md'
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /time
        @self.bot.on(events.NewMessage(pattern=r'/time\s+(\d{1,2}):(\d{1,2})'))
        async def time_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /time –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
            sender = await event.get_sender()
            user = get_or_create_user(
                self.db, 
                sender.id, 
                sender.first_name,
                getattr(sender, 'last_name', None),
                getattr(sender, 'username', None)
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            match = event.pattern_match
            hour, minute = int(match.group(1)), int(match.group(2))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
            if 0 <= hour <= 23 and 0 <= minute <= 59:
                time_str = f"{hour:02d}:{minute:02d}"
                update_user_settings(self.db, user.id, delivery_time=time_str)
                await event.respond(f"‚úÖ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}")
            else:
                await event.respond("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /frequency
        @self.bot.on(events.NewMessage(pattern=r'/frequency\s+(daily|weekly)'))
        async def frequency_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /frequency –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
            sender = await event.get_sender()
            user = get_or_create_user(
                self.db, 
                sender.id, 
                sender.first_name,
                getattr(sender, 'last_name', None),
                getattr(sender, 'username', None)
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            frequency = event.pattern_match.group(1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_user_settings(self.db, user.id, delivery_frequency=frequency)
            
            frequency_text = "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ" if frequency == "daily" else "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
            await event.respond(f"‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {frequency_text}")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
        @self.bot.on(events.NewMessage(pattern='/list'))
        async def list_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /list –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
            sender = await event.get_sender()
            user = get_or_create_user(
                self.db, 
                sender.id, 
                sender.first_name,
                getattr(sender, 'last_name', None),
                getattr(sender, 'username', None)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscriptions = [s for s in user.chats if s.is_active]
            
            if not subscriptions:
                await event.respond("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Ç—ã. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–≥–æ.")
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            chats_list = "\n".join([f"‚Ä¢ {sub.chat_title} (ID: {sub.chat_id})" for sub in subscriptions])
            
            await event.respond(
                f"üìã **–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —á–∞—Ç—ã:**\n\n"
                f"{chats_list}\n\n"
                f"–í—Å–µ–≥–æ: {len(subscriptions)} —á–∞—Ç(–æ–≤)",
                parse_mode='md'
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unsubscribe
        @self.bot.on(events.NewMessage(pattern='/unsubscribe'))
        async def unsubscribe_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /unsubscribe –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —á–∞—Ç–∞"""
            sender = await event.get_sender()
            user = get_or_create_user(
                self.db, 
                sender.id, 
                sender.first_name,
                getattr(sender, 'last_name', None),
                getattr(sender, 'username', None)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscriptions = [s for s in user.chats if s.is_active]
            
            if not subscriptions:
                await event.respond("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Ç—ã.")
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
            message = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ –Ω–æ–º–µ—Ä:\n\n"
            
            for i, sub in enumerate(subscriptions, 1):
                message += f"{i}. {sub.chat_title}\n"
                
            message += "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏."
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            self._temp_unsubscribe_data = {
                sender.id: {
                    "subscriptions": subscriptions,
                    "message_id": (await event.respond(message)).id
                }
            }
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø–∏—Å–∫–∏
        @self.bot.on(events.NewMessage(pattern=r'^[0-9]+$'))
        async def unsubscribe_confirm_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏"""
            sender = await event.get_sender()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
            if not hasattr(self, '_temp_unsubscribe_data') or sender.id not in self._temp_unsubscribe_data:
                return
                
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
                choice = int(event.text.strip())
                data = self._temp_unsubscribe_data[sender.id]
                subscriptions = data["subscriptions"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä
                if 1 <= choice <= len(subscriptions):
                    sub = subscriptions[choice - 1]
                    
                    # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —á–∞—Ç–∞
                    if unsubscribe_from_chat(self.db, sub.user_id, sub.chat_id):
                        await event.respond(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —á–∞—Ç–∞ {sub.chat_title}")
                    else:
                        await event.respond("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —á–∞—Ç–∞")
                        
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    del self._temp_unsubscribe_data[sender.id]
                else:
                    await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except (ValueError, IndexError):
                await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —á–∞—Ç–∞.")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤)
        @self.bot.on(events.NewMessage(func=lambda e: e.is_private and e.message.forward))
        async def forwarded_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤"""
            sender = await event.get_sender()
            user = get_or_create_user(
                self.db, 
                sender.id, 
                sender.first_name,
                getattr(sender, 'last_name', None),
                getattr(sender, 'username', None)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            msg = event.message
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg}")
            logger.info(f"–ê—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞ forward: {dir(msg.forward)}")
            
            try:
                forward_info = msg.forward
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
                from_id = None
                chat_id = None
                chat_title = None
                is_private_chat = False
                user_id = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤)
                if hasattr(forward_info, 'from_id'):
                    logger.info(f"–ù–∞–π–¥–µ–Ω –∞—Ç—Ä–∏–±—É—Ç from_id: {forward_info.from_id}")
                    from_id = forward_info.from_id
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ from_id PeerUser (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç)
                    if hasattr(from_id, 'user_id'):
                        user_id = from_id.user_id
                        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID: {user_id}")
                        is_private_chat = True
                        # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id –≤ –∫–∞—á–µ—Å—Ç–≤–µ chat_id —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "user_"
                        chat_id = f"user_{user_id}"
                    # –ï—Å–ª–∏ –µ—Å—Ç—å from_id, –Ω–æ –Ω–µ—Ç chat_id, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
                    elif not chat_id and hasattr(from_id, 'channel_id'):
                        chat_id = from_id.channel_id
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –±–µ–∑ —è–≤–Ω–æ–≥–æ ID)
                if hasattr(forward_info, 'from_name') and forward_info.from_name and not user_id:
                    logger.info(f"–ù–∞–π–¥–µ–Ω –∞—Ç—Ä–∏–±—É—Ç from_name: {forward_info.from_name}")
                    chat_title = forward_info.from_name
                    is_private_chat = True
                    # –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ (–Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
                    # –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ª—É—á—à–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ API
                    chat_id = f"name_{hash(forward_info.from_name) % 10000000}"
                
                # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å ID —á–∞—Ç–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (–¥–ª—è –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤)
                if not is_private_chat:
                    if hasattr(forward_info, 'chat') and forward_info.chat:
                        logger.info(f"–ù–∞–π–¥–µ–Ω –∞—Ç—Ä–∏–±—É—Ç chat: {forward_info.chat}")
                        if hasattr(forward_info.chat, 'id'):
                            chat_id = forward_info.chat.id
                        if hasattr(forward_info.chat, 'title'):
                            chat_title = forward_info.chat.title
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Å–ª—É—á–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã
                    if hasattr(forward_info, 'channel_id'):
                        logger.info(f"–ù–∞–π–¥–µ–Ω –∞—Ç—Ä–∏–±—É—Ç channel_id: {forward_info.channel_id}")
                        chat_id = forward_info.channel_id
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å ID —á–∞—Ç–∞
                    if not chat_id and hasattr(msg, 'peer_id'):
                        logger.info(f"–ù–∞–π–¥–µ–Ω –∞—Ç—Ä–∏–±—É—Ç peer_id: {msg.peer_id}")
                        if hasattr(msg.peer_id, 'channel_id'):
                            chat_id = msg.peer_id.channel_id
                            
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
                    if not chat_title and hasattr(forward_info, 'chat_name'):
                        chat_title = forward_info.chat_name
                    elif not chat_title and hasattr(forward_info, 'channel_post') and forward_info.channel_post:
                        # –î–ª—è –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
                        chat_title = f"–ö–∞–Ω–∞–ª (ID: {chat_id})"
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —á–∞—Ç–∞ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞
                if not chat_id:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {msg}")
                    await event.respond(
                        "‚ùå –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç –∏–∑ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
                        "–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞.\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                        "1. –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã\n"
                        "2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞\n"
                        "3. –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã"
                    )
                    return
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
                if not chat_title:
                    if is_private_chat and user_id:
                        chat_title = f"–õ–∏—á–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}"
                    else:
                        chat_title = f"–ß–∞—Ç {chat_id}"
                
                logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —á–∞—Ç: ID={chat_id}, Title={chat_title}, IsPrivate={is_private_chat}")
                
                # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
                if is_private_chat:
                    try:
                        if user_id:
                            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            user_entity = await self.client.get_entity(user_id)
                            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            full_name = getattr(user_entity, 'first_name', '')
                            if hasattr(user_entity, 'last_name') and user_entity.last_name:
                                full_name += f" {user_entity.last_name}"
                            
                            chat_title = f"–õ–∏—á–Ω—ã–π —á–∞—Ç —Å {full_name}"
                        
                        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ª–∏—á–Ω—ã–π —á–∞—Ç
                        subscription = subscribe_to_chat(self.db, user.id, chat_id, chat_title)
                        
                        await event.respond(
                            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–∞–º–º–∞—Ä–∏ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ **{chat_title}**\n\n"
                            f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.",
                            parse_mode='md'
                        )
                        return
                        
                    except Exception as e:
                        chat_error = str(e)
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞: {chat_error}")
                        await event.respond(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ª–∏—á–Ω—ã–π —á–∞—Ç **{chat_title}**.\n\n"
                            f"–û—à–∏–±–∫–∞: {chat_error}",
                            parse_mode='md'
                        )
                        return
                
                # –î–ª—è –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å —á–∞—Ç–∞ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å —á–∞—Ç–∞
                    chat_entity = await self.client.get_entity(chat_id)
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å —á–∞—Ç–∞ {chat_id}")
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –Ω–µ—ë
                    if hasattr(chat_entity, 'title') and chat_entity.title:
                        chat_title = chat_entity.title
                    
                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —á–∞—Ç
                    subscription = subscribe_to_chat(self.db, user.id, chat_id, chat_title)
                    
                    await event.respond(
                        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–∞–º–º–∞—Ä–∏ —á–∞—Ç–∞ **{chat_title}**\n\n"
                        f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.",
                        parse_mode='md'
                    )
                    
                except Exception as e:
                    chat_error = str(e)
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞ {chat_id}: {chat_error}")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    if "Cannot get entity from a channel" in chat_error or "Could not find the input entity" in chat_error:
                        await event.respond(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —á–∞—Ç **{chat_title}**.\n\n"
                            f"–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∞–º–º–∞—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞. "
                            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç {PHONE} –≤ —á–∞—Ç –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n\n"
                            f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {chat_error}",
                            parse_mode='md'
                        )
                    else:
                        await event.respond(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —á–∞—Ç **{chat_title}**.\n\n"
                            f"–ü—Ä–∏—á–∏–Ω–∞: {chat_error}\n\n"
                            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç {PHONE} —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞.",
                            parse_mode='md'
                        )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                await event.respond(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
                    f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–æ–≥–æ –∂–µ —á–∞—Ç–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
                )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /summary –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–∞–º–º–∞—Ä–∏
        @self.bot.on(events.NewMessage(pattern='/summary'))
        async def summary_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /summary –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–∞–º–º–∞—Ä–∏"""
            sender = await event.get_sender()
            user = get_or_create_user(
                self.db, 
                sender.id, 
                sender.first_name,
                getattr(sender, 'last_name', None),
                getattr(sender, 'username', None)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscriptions = [s for s in user.chats if s.is_active]
            
            if not subscriptions:
                await event.respond("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Ç—ã. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–≥–æ.")
                return
                
            await event.respond("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await generate_and_send_summaries(self.client, self.db, user, self.bot, event.chat_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {str(e)}")
                await event.respond(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {str(e)}")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /models
        @self.bot.on(events.NewMessage(pattern='/models'))
        async def models_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /models –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
            models_list = await list_available_models()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
            await event.respond(models_list, parse_mode='html')
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /model
        @self.bot.on(events.NewMessage(pattern=r'/model\s+(.+)'))
        async def model_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /model –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
            sender = await event.get_sender()
            user = get_or_create_user(
                self.db, 
                sender.id, 
                sender.first_name,
                getattr(sender, 'last_name', None),
                getattr(sender, 'username', None)
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            model_id = event.pattern_match.group(1).strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            if model_id in AVAILABLE_MODELS:
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                update_user_settings(self.db, user.id, openrouter_model=model_id)
                model_display_name = AVAILABLE_MODELS[model_id]
                
                await event.respond(
                    f"‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:\n"
                    f"<b>{model_display_name}</b>\n\n"
                    f"<code>{model_id}</code>",
                    parse_mode='html'
                )
            else:
                # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
                await event.respond(
                    f"‚ùå –ú–æ–¥–µ–ª—å <code>{model_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞:",
                    parse_mode='html'
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
                models_list = await list_available_models()
                await event.respond(models_list, parse_mode='html')

async def generate_and_send_summaries(client, db: Session, user: User, bot=None, chat_id=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        client: Telegram –∫–ª–∏–µ–Ω—Ç
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        bot: Telegram –±–æ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscriptions = [s for s in user.chats if s.is_active]
    
    if not subscriptions:
        logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
        if bot and chat_id:
            await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Ç—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–æ–¥–µ–ª—å
    user_model = get_user_model(db, user.id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å: {user_model}")
        
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    for subscription in subscriptions:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º —á–∞—Ç–æ–º
            is_private_chat = str(subscription.chat_id).startswith('user_') or str(subscription.chat_id).startswith('name_')
            
            if is_private_chat:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç: {subscription.chat_title}")
                
                # –î–ª—è —á–∞—Ç–æ–≤ —Å user_id
                if str(subscription.chat_id).startswith('user_'):
                    user_id = int(str(subscription.chat_id).replace('user_', ''))
                    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω user_id: {user_id}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        chat_entity = await client.get_entity(user_id)
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
                        if bot and chat_id:
                            await bot.send_message(
                                chat_id,
                                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É {subscription.chat_title}: {str(e)}"
                            )
                        continue
                else:
                    # –î–ª—è —á–∞—Ç–æ–≤ —Å –∏–º–µ–Ω–µ–º –±–µ–∑ user_id
                    logger.warning(f"–ß–∞—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –ø–æ –∏–º–µ–Ω–∏: {subscription.chat_title}")
                    if bot and chat_id:
                        await bot.send_message(
                            chat_id,
                            f"‚ö†Ô∏è –ß–∞—Ç {subscription.chat_title} –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –ø–æ –∏–º–µ–Ω–∏. "
                            f"–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ—Å–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞."
                        )
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                last_processed_id = subscription.last_processed_message_id
                
                # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ—Ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                if not last_processed_id:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                    yesterday = datetime.now(TIMEZONE) - timedelta(days=1)
                    messages = await client.get_messages(
                        chat_entity,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º entity –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        limit=100,    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                        offset_date=yesterday
                    )
                else:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
                    messages = await client.get_messages(
                        chat_entity,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º entity –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        limit=100,
                        min_id=last_processed_id
                    )
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                chat_entity = await client.get_entity(subscription.chat_id)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                last_processed_id = subscription.last_processed_message_id
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ—Ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                if not last_processed_id:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                    yesterday = datetime.now(TIMEZONE) - timedelta(days=1)
                    messages = await client.get_messages(
                        chat_entity,
                        limit=100,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                        offset_date=yesterday
                    )
                else:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
                    messages = await client.get_messages(
                        chat_entity,
                        limit=100,
                        min_id=last_processed_id
                    )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not messages:
                logger.info(f"–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {subscription.chat_title}")
                if bot and chat_id:
                    await bot.send_message(
                        chat_id,
                        f"–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {subscription.chat_title} —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∞–º–º–∞—Ä–∏."
                    )
                continue
                
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID
            messages = sorted(messages, key=lambda m: m.id)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
            messages_text = ""
            for msg in messages:
                if msg.message:
                    sender = await client.get_entity(msg.sender_id) if msg.sender_id else None
                    sender_name = f"{getattr(sender, 'first_name', '')} {getattr(sender, 'last_name', '')}".strip() if sender else "Unknown"
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    timestamp = msg.date.astimezone(TIMEZONE).strftime("%d.%m %H:%M")
                    messages_text += f"[{timestamp}] {sender_name}: {msg.message}\n\n"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            summary_text = await generate_summary(messages_text, user_model)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            summary = save_summary(
                db, 
                subscription.id, 
                summary_text,
                messages[0].id if messages else None,
                messages[-1].id if messages else None,
                model_used=user_model
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if messages:
                update_last_processed_message(db, subscription.id, messages[-1].id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if bot and chat_id:
                model_display_name = AVAILABLE_MODELS.get(user_model, user_model)
                await bot.send_message(
                    chat_id,
                    f"üìù <b>–°–∞–º–º–∞—Ä–∏ —á–∞—Ç–∞ {subscription.chat_title}</b>\n"
                    f"<i>–ú–æ–¥–µ–ª—å: {model_display_name}</i>\n\n"
                    f"{summary_text}",
                    parse_mode='html'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–∞ {subscription.chat_title}: {str(e)}")
            if bot and chat_id:
                await bot.send_message(
                    chat_id,
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–∞ {subscription.chat_title}: {str(e)}"
                )
                
    logger.info(f"–°–∞–º–º–∞—Ä–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}") 