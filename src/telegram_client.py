import os
import asyncio
from telethon import TelegramClient, events
from telethon.tl import types
from telethon.errors import SessionPasswordNeededError, FloodWaitError
from typing import List, Dict, Any, Optional, Union
from datetime import datetime, timedelta
import pytz
from sqlalchemy.orm import Session

from src.config import API_ID, API_HASH, PHONE, BOT_TOKEN, TIMEZONE
from src.database import (
    get_or_create_user, 
    subscribe_to_chat, 
    unsubscribe_from_chat, 
    update_user_settings, 
    save_summary, 
    update_last_processed_message
)
from src.models import User, ChatSubscription
from src.utils.logger import logger
from src.utils.openrouter import generate_summary


class TelegramSummaryClient:
    def __init__(self, db: Session):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç Telegram
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        self.db = db
        self.client = TelegramClient('anon', API_ID, API_HASH)
        self.bot = None  # –ö–ª–∏–µ–Ω—Ç –±–æ—Ç–∞ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Telegram –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            await self.client.start(phone=PHONE)
            logger.info("Telethon –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω
            if BOT_TOKEN:
                self.bot = TelegramClient('bot', API_ID, API_HASH)
                await self.bot.start(bot_token=BOT_TOKEN)
                logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
                self._register_bot_handlers()
            else:
                logger.warning("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω, –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
            raise
            
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Telegram"""
        if self.client:
            await self.client.disconnect()
            logger.info("Telethon –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        if self.bot:
            await self.bot.disconnect()
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
    def _register_bot_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        @self.bot.on(events.NewMessage(pattern='/start'))
        async def start_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
            sender = await event.get_sender()
            user = get_or_create_user(
                self.db, 
                sender.id, 
                sender.first_name,
                getattr(sender, 'last_name', None),
                getattr(sender, 'username', None)
            )
            
            await event.respond(
                f"–ü—Ä–∏–≤–µ—Ç, {sender.first_name}! üëã\n\n"
                "–Ø - –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ –ø–æ —á–∞—Ç–∞–º Telegram.\n\n"
                "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
                "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —á–∞—Ç–∞–º\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤—Ä–µ–º—è –∏ —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏\n\n"
                "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞.\n"
                "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /settings.\n\n"
                "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π /help."
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        @self.bot.on(events.NewMessage(pattern='/help'))
        async def help_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help"""
            help_text = (
                "üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
                "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
                "/settings - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –∏ —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏\n"
                "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Å–∞–º–º–∞—Ä–∏\n"
                "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —á–∞—Ç–∞ (–±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –≤—ã–±–æ—Ä)\n"
                "/summary - –ü–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n\n"
                "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏, –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞."
            )
            await event.respond(help_text, parse_mode='md')
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings
        @self.bot.on(events.NewMessage(pattern='/settings'))
        async def settings_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /settings"""
            sender = await event.get_sender()
            user = get_or_create_user(
                self.db, 
                sender.id, 
                sender.first_name,
                getattr(sender, 'last_name', None),
                getattr(sender, 'username', None)
            )
            
            settings = user.settings
            
            await event.respond(
                "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
                f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏: {settings.delivery_time}\n"
                f"–ß–∞—Å—Ç–æ—Ç–∞: {settings.delivery_frequency}\n"
                f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {settings.timezone}\n\n"
                "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`/time –ß–ß:–ú–ú`\n\n"
                "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É, –æ—Ç–ø—Ä–∞–≤—å:\n"
                "`/frequency daily` –∏–ª–∏ `/frequency weekly`",
                parse_mode='md'
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /time
        @self.bot.on(events.NewMessage(pattern=r'/time\s+(\d{1,2}):(\d{1,2})'))
        async def time_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /time –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
            sender = await event.get_sender()
            user = get_or_create_user(
                self.db, 
                sender.id, 
                sender.first_name,
                getattr(sender, 'last_name', None),
                getattr(sender, 'username', None)
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            match = event.pattern_match
            hour, minute = int(match.group(1)), int(match.group(2))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
            if 0 <= hour <= 23 and 0 <= minute <= 59:
                time_str = f"{hour:02d}:{minute:02d}"
                update_user_settings(self.db, user.id, delivery_time=time_str)
                await event.respond(f"‚úÖ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}")
            else:
                await event.respond("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /frequency
        @self.bot.on(events.NewMessage(pattern=r'/frequency\s+(daily|weekly)'))
        async def frequency_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /frequency –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
            sender = await event.get_sender()
            user = get_or_create_user(
                self.db, 
                sender.id, 
                sender.first_name,
                getattr(sender, 'last_name', None),
                getattr(sender, 'username', None)
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            frequency = event.pattern_match.group(1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_user_settings(self.db, user.id, delivery_frequency=frequency)
            
            frequency_text = "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ" if frequency == "daily" else "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
            await event.respond(f"‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {frequency_text}")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
        @self.bot.on(events.NewMessage(pattern='/list'))
        async def list_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /list –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
            sender = await event.get_sender()
            user = get_or_create_user(
                self.db, 
                sender.id, 
                sender.first_name,
                getattr(sender, 'last_name', None),
                getattr(sender, 'username', None)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscriptions = [s for s in user.chats if s.is_active]
            
            if not subscriptions:
                await event.respond("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Ç—ã. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–≥–æ.")
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            chats_list = "\n".join([f"‚Ä¢ {sub.chat_title} (ID: {sub.chat_id})" for sub in subscriptions])
            
            await event.respond(
                f"üìã **–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —á–∞—Ç—ã:**\n\n"
                f"{chats_list}\n\n"
                f"–í—Å–µ–≥–æ: {len(subscriptions)} —á–∞—Ç(–æ–≤)",
                parse_mode='md'
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unsubscribe
        @self.bot.on(events.NewMessage(pattern='/unsubscribe'))
        async def unsubscribe_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /unsubscribe –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —á–∞—Ç–∞"""
            sender = await event.get_sender()
            user = get_or_create_user(
                self.db, 
                sender.id, 
                sender.first_name,
                getattr(sender, 'last_name', None),
                getattr(sender, 'username', None)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscriptions = [s for s in user.chats if s.is_active]
            
            if not subscriptions:
                await event.respond("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Ç—ã.")
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
            message = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ –Ω–æ–º–µ—Ä:\n\n"
            
            for i, sub in enumerate(subscriptions, 1):
                message += f"{i}. {sub.chat_title}\n"
                
            message += "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏."
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            self._temp_unsubscribe_data = {
                sender.id: {
                    "subscriptions": subscriptions,
                    "message_id": (await event.respond(message)).id
                }
            }
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø–∏—Å–∫–∏
        @self.bot.on(events.NewMessage(pattern=r'^[0-9]+$'))
        async def unsubscribe_confirm_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏"""
            sender = await event.get_sender()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
            if not hasattr(self, '_temp_unsubscribe_data') or sender.id not in self._temp_unsubscribe_data:
                return
                
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
                choice = int(event.text.strip())
                data = self._temp_unsubscribe_data[sender.id]
                subscriptions = data["subscriptions"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä
                if 1 <= choice <= len(subscriptions):
                    sub = subscriptions[choice - 1]
                    
                    # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —á–∞—Ç–∞
                    if unsubscribe_from_chat(self.db, sub.user_id, sub.chat_id):
                        await event.respond(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —á–∞—Ç–∞ {sub.chat_title}")
                    else:
                        await event.respond("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —á–∞—Ç–∞")
                        
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    del self._temp_unsubscribe_data[sender.id]
                else:
                    await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except (ValueError, IndexError):
                await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —á–∞—Ç–∞.")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤)
        @self.bot.on(events.NewMessage(func=lambda e: e.is_private and e.message.forward))
        async def forwarded_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤"""
            sender = await event.get_sender()
            user = get_or_create_user(
                self.db, 
                sender.id, 
                sender.first_name,
                getattr(sender, 'last_name', None),
                getattr(sender, 'username', None)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            msg = event.message
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ—Å—ã–ª–∫–µ
            if not msg.forward or not msg.forward.chat:
                await event.respond("‚ùå –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç –∏–∑ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞.")
                return
                
            forward_info = msg.forward
            chat_id = forward_info.chat.id
            chat_title = forward_info.chat.title if hasattr(forward_info.chat, 'title') else str(chat_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
            try:
                chat_entity = await self.client.get_entity(chat_id)
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —á–∞—Ç
                subscription = subscribe_to_chat(self.db, user.id, chat_id, chat_title)
                
                await event.respond(
                    f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–∞–º–º–∞—Ä–∏ —á–∞—Ç–∞ **{chat_title}**\n\n"
                    f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.",
                    parse_mode='md'
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ —á–∞—Ç {chat_id}: {str(e)}")
                await event.respond(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —á–∞—Ç. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É\n"
                    "‚Ä¢ –ß–∞—Ç –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                    "‚Ä¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞."
                )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /summary –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–∞–º–º–∞—Ä–∏
        @self.bot.on(events.NewMessage(pattern='/summary'))
        async def summary_handler(event):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /summary –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–∞–º–º–∞—Ä–∏"""
            sender = await event.get_sender()
            user = get_or_create_user(
                self.db, 
                sender.id, 
                sender.first_name,
                getattr(sender, 'last_name', None),
                getattr(sender, 'username', None)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscriptions = [s for s in user.chats if s.is_active]
            
            if not subscriptions:
                await event.respond("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Ç—ã. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–≥–æ.")
                return
                
            await event.respond("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await generate_and_send_summaries(self.client, self.db, user, self.bot, event.chat_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {str(e)}")
                await event.respond(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {str(e)}")
            
            
async def generate_and_send_summaries(client, db: Session, user: User, bot=None, chat_id=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        client: Telegram –∫–ª–∏–µ–Ω—Ç
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        bot: Telegram –±–æ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscriptions = [s for s in user.chats if s.is_active]
    
    if not subscriptions:
        logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
        if bot and chat_id:
            await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Ç—ã.")
        return
        
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    for subscription in subscriptions:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_entity = await client.get_entity(subscription.chat_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            last_processed_id = subscription.last_processed_message_id
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ—Ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            if not last_processed_id:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                yesterday = datetime.now(TIMEZONE) - timedelta(days=1)
                messages = await client.get_messages(
                    chat_entity,
                    limit=100,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                    offset_date=yesterday
                )
            else:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
                messages = await client.get_messages(
                    chat_entity,
                    limit=100,
                    min_id=last_processed_id
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not messages:
                logger.info(f"–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {subscription.chat_title}")
                continue
                
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID
            messages = sorted(messages, key=lambda m: m.id)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
            messages_text = ""
            for msg in messages:
                if msg.message:
                    sender = await client.get_entity(msg.sender_id) if msg.sender_id else None
                    sender_name = f"{getattr(sender, 'first_name', '')} {getattr(sender, 'last_name', '')}".strip() if sender else "Unknown"
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    timestamp = msg.date.astimezone(TIMEZONE).strftime("%d.%m %H:%M")
                    messages_text += f"[{timestamp}] {sender_name}: {msg.message}\n\n"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏
            summary_text = await generate_summary(messages_text)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            summary = save_summary(
                db, 
                subscription.id, 
                summary_text,
                messages[0].id if messages else None,
                messages[-1].id if messages else None
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if messages:
                update_last_processed_message(db, subscription.id, messages[-1].id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if bot and chat_id:
                await bot.send_message(
                    chat_id,
                    f"üìù **–°–∞–º–º–∞—Ä–∏ —á–∞—Ç–∞ {subscription.chat_title}:**\n\n{summary_text}",
                    parse_mode='md'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–∞ {subscription.chat_title}: {str(e)}")
            if bot and chat_id:
                await bot.send_message(
                    chat_id,
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–∞ {subscription.chat_title}: {str(e)}"
                )
                
    logger.info(f"–°–∞–º–º–∞—Ä–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}") 